
Assignment: React.js Lifecycle Methods
Objective:
This assignment will help you understand the lifecycle methods in React class components and the equivalent hooks in functional components.

Tasks:
Explain Lifecycle in Class Components
Explain Lifecycle in Functional Components with Hooks
1. Explain Lifecycle in Class Components
React class components have several lifecycle methods that you can override to run code at specific times during the component's life.

Mounting (when an instance of a component is being created and inserted into the DOM):
constructor(): Called before the component is mounted. Used to initialize state and bind methods.
componentDidMount(): Called after the component is mounted. Used for initializing network requests, subscriptions, or interacting with the DOM.
Updating (when props or state change):
shouldComponentUpdate(nextProps, nextState): Determines if a re-render is necessary. Returns true by default.
componentDidUpdate(prevProps, prevState): Called after the component has been updated. Useful for DOM operations or network requests based on changes.
Unmounting (when a component is being removed from the DOM):
componentWillUnmount(): Called before the component is unmounted and destroyed. Used for cleanup (e.g., removing event listeners, canceling network requests).
Error Handling:
componentDidCatch(error, info): Called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.
Example of Class Component with Lifecycle Methods:
jsx
Copy code
import React, { Component } from 'react';

class MyComponent extends Component {
  constructor(props) {
    super(props);
    this.state = { count: 0 };
  }

  componentDidMount() {
    console.log('Component did mount');
  }

  shouldComponentUpdate(nextProps, nextState) {
    return true;
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('Component did update');
  }

  componentWillUnmount() {
    console.log('Component will unmount');
  }

  render() {
    return (
      <div>
        <p>Count: {this.state.count}</p>
        <button onClick={() => this.setState({ count: this.state.count + 1 })}>
          Increment
        </button>
      </div>
    );
  }
}

export default MyComponent;
2. Explain Lifecycle in Functional Components with Hooks
Functional components use hooks to manage state and side effects, replacing the lifecycle methods in class components.

Mounting and Updating:
useState(): Manages state in a functional component.
useEffect(): Combines componentDidMount, componentDidUpdate, and componentWillUnmount. It can handle side effects, including data fetching, subscriptions, and manual DOM changes.
Example of Functional Component with Hooks:
jsx
Copy code
import React, { useState, useEffect } from 'react';

const MyComponent = () => {
  const [count, setCount] = useState(0);

  useEffect(() => {
    console.log('Component did mount or update');
    // Cleanup function similar to componentWillUnmount
    return () => {
      console.log('Component will unmount');
    };
  }, [count]); // Dependency array; if empty, effect runs once (mount and unmount)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>
        Increment
      </button>
    </div>
  );
};

export default MyComponent;
Summary:
Class Components use methods like componentDidMount, shouldComponentUpdate, componentDidUpdate, and componentWillUnmount to handle lifecycle events.
Functional Components use hooks like useState and useEffect to manage state and side effects, which combine the functionalities of various lifecycle methods in class components.
Complete these tasks to understand the lifecycle methods in both class and functional components in React.
